// Generated by CoffeeScript 1.6.2
(function() {
  var CssPackage, Dependency, JsPackage, Package, Stitch, createPackage, cssFile, fs, jsFile, path, stitchFile, toArray, uglify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  stitchFile = require('../assets/stitch');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  toArray = require('./utils').toArray;

  jsFile = /\.js$/i;

  cssFile = /\.css$/i;

  createPackage = function(name, config) {
    if (jsFile.test(config.target)) {
      return new JsPackage(name, config);
    } else if (cssFile.test(config.target)) {
      return new CssPackage(name, config);
    } else {
      throw new Error("Unsupported package type.");
    }
  };

  Package = (function() {
    function Package(name, config) {
      if (config == null) {
        config = {};
      }
      this.name = name;
      this.target = config.target || (function() {
        throw new Error("Missing target for " + name);
      })();
      this.root = "./";
      this["public"] = "public";
      this.paths = toArray(config.paths || []);
      this.test = config.test;
      this.url = config.url || "/" + target;
      this["static"] = config["static"] || {
        "/": "" + root + "/public"
      };
      this.version = config.version;
      this.identifier = config.identifier || 'require';
      this.libs = toArray(config.libs || []);
      this.modules = toArray(config.modules || []);
      this.after = config.after || "";
    }

    Package.prototype.handleCompileError = function(ex) {
      console.error(ex.message);
      if (ex.path) {
        console.error(ex.path);
      }
      if (ex.location) {
        console.error(ex.location);
      }
      switch (this.argv.command) {
        case "server" || "watch":
          return "console.log(\"" + ex + "\");";
        default:
          return process.exit(1);
      }
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.build = function(minify) {
      var source;

      if (minify == null) {
        minify = false;
      }
      console.log("Building '" + this.name + "' target: " + this.target);
      source = this.compile(minify);
      if (source) {
        return fs.writeFileSync(this.target, source);
      }
    };

    Package.prototype.watch = function() {
      var dir, lib, _i, _len, _ref, _results,
        _this = this;

      console.log("Watching '" + this.name + "'");
      _ref = ((function() {
        var _j, _len, _ref, _results1;

        _ref = this.libs;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          lib = _ref[_j];
          _results1.push(path.dirname(lib));
        }
        return _results1;
      }).call(this)).concat(this.paths);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (!fs.existsSync(dir)) {
          continue;
        }
        _results.push(require('watch').watchTree(dir, {
          persistent: true,
          interval: 1000
        }, function(file, curr, prev) {
          if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
            return _this.build();
          }
        }));
      }
      return _results;
    };

    Package.prototype.canTest = function() {
      return jsFile.test(target);
    };

    Package.prototype.isMatchingUrl = function(url) {};

    return Package;

  })();

  JsPackage = (function(_super) {
    __extends(JsPackage, _super);

    function JsPackage(name, config) {
      if (config == null) {
        config = {};
      }
      JsPackage.__super__.constructor.call(this, name, config);
    }

    JsPackage.prototype.compile = function(minify) {
      var ex, result;

      if (minify == null) {
        minify = false;
      }
      try {
        result = [this.compileLibs(), this.compileModules(), this.after].join("\n");
        if (minify) {
          result = uglify(result);
        }
        return result;
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    JsPackage.prototype.compileModules = function() {
      var _modules, _stitch;

      this.depend || (this.depend = new Dependency(this.modules));
      _stitch = new Stitch(this.paths);
      _modules = this.depend.resolve().concat(_stitch.resolve());
      return stitchFile({
        identifier: this.identifier,
        modules: _modules
      });
    };

    JsPackage.prototype.compileLibs = function() {
      var lib;

      return ((function() {
        var _i, _len, _ref, _results;

        _ref = this.libs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          _results.push(fs.readFileSync(lib, 'utf8'));
        }
        return _results;
      }).call(this)).join("\n");
    };

    return JsPackage;

  })(Package);

  CssPackage = (function(_super) {
    __extends(CssPackage, _super);

    function CssPackage(name, config) {
      if (config == null) {
        config = {};
      }
      CssPackage.__super__.constructor.call(this, name, config);
    }

    CssPackage.prototype.compile = function(minify) {
      var ex, result, _i, _len, _path, _ref;

      if (minify == null) {
        minify = false;
      }
      try {
        result = [];
        _ref = this.paths;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _path = _ref[_i];
          _path = require.resolve(path.resolve(_path));
          delete require.cache[_path];
          result.push(require(_path));
        }
        return result.join("\n");
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    return CssPackage;

  })(Package);

  module.exports.createPackage = createPackage;

}).call(this);
