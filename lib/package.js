// Generated by CoffeeScript 1.6.2
(function() {
  var Application, CssPackage, Dependency, JsPackage, Package, Stitch, TestPackage, createApplication, fs, path, uglify, utils, versioning,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  utils = require('./utils');

  versioning = require('./versioning');

  Application = (function() {
    function Application(name, config) {
      var defaults, err, key, loadedDefaults, packager, pkg, route, value, verType, _ref, _ref1;

      if (config == null) {
        config = {};
      }
      this.name = name;
      this.route = config.route;
      this.root = config.root;
      if (config.defaults) {
        try {
          loadedDefaults = utils.loadAsset('defaults/' + config.defaults);
          defaults = utils.extend({}, loadedDefaults);
        } catch (_error) {
          err = _error;
          utils.error("ERROR: Invalid 'defaults' value provided: " + config.defaults);
          process.exit(1);
        }
        config = utils.extend(defaults, config);
      }
      if (!this.root) {
        if (utils.isDirectory(this.name)) {
          this.root = this.name;
          this.route || (this.route = this.applyBaseRoute("/" + this.name));
        } else {
          this.root = "";
        }
      }
      this.route || (this.route = this.applyBaseRoute("/"));
      this.route = this.applyBaseRoute((_ref = config.hem) != null ? _ref.baseAppRoute : void 0, this.route);
      this["static"] = {};
      this.packages = {};
      _ref1 = config["static"];
      for (route in _ref1) {
        value = _ref1[route];
        this["static"][this.applyBaseRoute(this.route, route)] = this.applyRootDir(value)[0];
      }
      for (key in config) {
        value = config[key];
        packager = void 0;
        if (key === 'js' || utils.endsWith(key, '.js')) {
          packager = JsPackage;
          value.name = key;
        } else if (key === 'css' || utils.endsWith(key, '.css')) {
          packager = CssPackage;
          value.name = key;
        }
        if (packager) {
          pkg = new packager(this, value);
          this.packages[pkg.name] = pkg;
        }
      }
      if (config.test) {
        config.test.name = "test";
        this.packages.test = new TestPackage(this, config.test);
      }
      if (config.version) {
        verType = versioning[config.version.type];
        if (!verType) {
          utils.errorAndExit("Incorrect type value for version configuration: (" + config.version.type + ")");
        }
        this.versioning = new verType(this, config.version);
      }
    }

    Application.prototype.isMatchingRoute = function(route) {
      var name, pkg, _ref;

      if (this.versioning) {
        route = this.versioning.trim(route);
      }
      _ref = this.packages;
      for (name in _ref) {
        pkg = _ref[name];
        if (route === pkg.route) {
          return pkg;
        }
      }
    };

    Application.prototype.unlink = function() {
      var key, pkg, _ref, _results;

      utils.log("Removing application targets: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (key in _ref) {
        pkg = _ref[key];
        _results.push(pkg.unlink());
      }
      return _results;
    };

    Application.prototype.build = function() {
      var key, pkg, _ref, _results;

      utils.log("Building application targets: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (key in _ref) {
        pkg = _ref[key];
        _results.push(pkg.build());
      }
      return _results;
    };

    Application.prototype.watch = function() {
      var key, pkg, _ref, _results;

      utils.log("Watching application: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (key in _ref) {
        pkg = _ref[key];
        _results.push(pkg.watch());
      }
      return _results;
    };

    Application.prototype.version = function() {
      utils.log("Versioning application: <green>" + this.name + "</green>");
      if (this.versioning) {
        return this.versioning.update();
      } else {
        return utils.errorAndExit("ERROR: Versioning not enabled in slug.json");
      }
    };

    Application.prototype.applyRootDir = function(value) {
      var values,
        _this = this;

      values = utils.toArray(value);
      values = values.map(function(value) {
        if (utils.startsWith(value, "./")) {
          return value;
        } else {
          return utils.cleanPath(_this.root, value);
        }
      });
      return values;
    };

    Application.prototype.applyBaseRoute = function() {
      var values;

      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return utils.cleanRoute.apply(utils, values);
    };

    return Application;

  })();

  Package = (function() {
    function Package(parent, config) {
      var regexp, route, targetFile, targetUrl, value, _ref;

      this.parent = parent;
      this.name = config.name;
      this.paths = this.parent.applyRootDir(config.paths || "");
      this.target = this.parent.applyRootDir(config.target || "")[0];
      if (utils.isDirectory(this.target)) {
        if (this.name === this.ext) {
          targetFile = parent.name;
        } else {
          targetFile = this.name;
        }
        this.target = utils.cleanPath(this.target, targetFile);
      }
      if (!utils.endsWith(this.target, "." + this.ext)) {
        this.target = "" + this.target + "." + this.ext;
      }
      if (config.route) {
        if (utils.startsWith(this.target, "/")) {
          this.route = config.route;
        } else {
          this.route = this.parent.applyBaseRoute(parent.route, config.route);
        }
      } else {
        _ref = this.parent["static"];
        for (route in _ref) {
          value = _ref[route];
          if (!this.route) {
            if (utils.startsWith(this.target, value)) {
              regexp = new RegExp("^" + (value.replace(/\\/g, "\\\\")) + "(\\\\|\/)?");
              targetUrl = this.target.replace(regexp, "");
              this.route = this.parent.applyBaseRoute(route, targetUrl);
              console.log(regexp, this.target, targetUrl, this.route);
            }
          }
        }
      }
      if (utils.COMMAND === "server") {
        if (!this.route) {
          utils.errorAndExit("Unable to determine route for <yellow>" + this.target + "</yellow>");
        }
      }
    }

    Package.prototype.handleCompileError = function(ex) {
      if (ex.stack) {
        utils.log(ex.stack);
      } else {
        utils.error(ex.message);
      }
      if (ex.path) {
        utils.error(ex.path);
      }
      if (ex.location) {
        utils.error(ex.location);
      }
      switch (utils.COMMAND) {
        case "server" || "watch":
          return "console.log(\"HEM compile ERROR: " + ex + "\");";
        default:
          return process.exit(1);
      }
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        utils.info("- removing <yellow>" + this.target + "</yellow>");
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.build = function(write) {
      var extra, source;

      if (write == null) {
        write = true;
      }
      extra = (utils.COMPRESS && " <b>--using compression</b>") || "";
      utils.log("- Building target: <yellow>" + this.target + "</yellow>" + extra);
      source = this.compile();
      if (source && write) {
        fs.writeFileSync(this.target, source);
      }
      return source;
    };

    Package.prototype.watch = function() {
      var dir, _i, _len, _ref, _results,
        _this = this;

      _ref = this.getWatchedDirs();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (!fs.existsSync(dir)) {
          continue;
        }
        _results.push(require('watch').watchTree(dir, {
          persistent: true,
          interval: 1000
        }, function(file, curr, prev) {
          if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
            return _this.build();
          }
        }));
      }
      return _results;
    };

    Package.prototype.getWatchedDirs = function() {
      return this.paths;
    };

    Package.prototype.ext = "";

    return Package;

  })();

  JsPackage = (function(_super) {
    __extends(JsPackage, _super);

    function JsPackage(parent, config) {
      JsPackage.__super__.constructor.call(this, parent, config);
      this.identifier = config.identifier || 'require';
      this.libs = this.parent.applyRootDir(config.libs || []);
      this.after = utils.arrayToString(config.after || "");
      this.modules = utils.toArray(config.modules || []);
    }

    JsPackage.prototype.compile = function() {
      var ex, result;

      try {
        result = [this.compileLibs(), this.compileModules(), this.after].join("\n");
        if (utils.COMPRESS) {
          result = uglify(result);
        }
        return result;
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    JsPackage.prototype.compileModules = function() {
      var _modules, _stitch, _template;

      this.depend || (this.depend = new Dependency(this.modules));
      _stitch = new Stitch(this.paths);
      _modules = this.depend.resolve().concat(_stitch.resolve());
      if (_modules) {
        _template = utils.loadAsset('stitch');
        return _template({
          identifier: this.identifier,
          modules: _modules
        });
      } else {
        return "";
      }
    };

    JsPackage.prototype.compileLibs = function(files, parentDir) {
      var dir, file, results, slash, stats, _i, _len, _ref;

      if (files == null) {
        files = this.libs;
      }
      if (parentDir == null) {
        parentDir = "";
      }
      results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        slash = parentDir === "" ? "" : path.sep;
        file = parentDir + slash + file;
        if (fs.existsSync(file)) {
          stats = fs.lstatSync(file);
          if (stats.isDirectory()) {
            dir = fs.readdirSync(file);
            results.push(this.compileLibs(dir, file));
          } else if (stats.isFile() && ((_ref = path.extname(file)) === '.js' || _ref === '.coffee')) {
            results.push(fs.readFileSync(file, 'utf8'));
          }
        }
      }
      return results.join("\n");
    };

    JsPackage.prototype.getWatchedDirs = function() {
      return this.paths.concat(this.libs);
    };

    JsPackage.prototype.ext = "js";

    return JsPackage;

  })(Package);

  TestPackage = (function(_super) {
    __extends(TestPackage, _super);

    function TestPackage(parent, config) {
      TestPackage.__super__.constructor.call(this, parent, config);
      this.depends = utils.toArray(config.depends);
      this.runner = config.runner;
    }

    return TestPackage;

  })(JsPackage);

  CssPackage = (function(_super) {
    __extends(CssPackage, _super);

    function CssPackage(parent, config) {
      CssPackage.__super__.constructor.call(this, parent, config);
    }

    CssPackage.prototype.compile = function() {
      var ex, result, _i, _len, _path, _ref;

      try {
        result = [];
        _ref = this.paths;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _path = _ref[_i];
          _path = require.resolve(path.resolve(_path));
          delete require.cache[_path];
          result.push(require(_path));
        }
        return result.join("\n");
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    CssPackage.prototype.ext = "css";

    return CssPackage;

  })(Package);

  createApplication = function(name, config) {
    return new Application(name, config);
  };

  module.exports.createApplication = createApplication;

}).call(this);
