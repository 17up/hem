// Generated by CoffeeScript 1.3.3
(function() {
  var Dependency, Package, Stitch, fs, mime, path, stitch, toArray, uglify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  stitch = require('../assets/stitch');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  toArray = require('./utils').toArray;

  mime = require('connect')["static"].mime;

  Package = (function() {

    function Package(name, config) {
      if (config == null) {
        config = {};
      }
      this.middleware = __bind(this.middleware, this);

      this.name = name;
      this.require = config.require;
      this.libs = toArray(config.libs || []);
      this.paths = toArray(config.paths || []);
      this.modules = toArray(config.modules || []);
      this.target = config.target;
      this.jsAfter = config.jsAfter || "";
      this.url = config.url || "";
      this.contentType = mime.lookup(this.target);
    }

    Package.prototype.compileModules = function() {
      this.dependency || (this.dependency = new Dependency(this.modules));
      this.stitch = new Stitch(this.paths);
      this.stuff = this.dependency.resolve().concat(this.stitch.resolve());
      return stitch({
        identifier: this.require,
        modules: this.stuff
      });
    };

    Package.prototype.compileLibs = function() {
      var lib;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.libs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          _results.push(fs.readFileSync(lib, 'utf8'));
        }
        return _results;
      }).call(this)).join("\n");
    };

    Package.prototype.compile = function(minify) {
      var command, result, _i, _len, _path, _ref;
      if (minify == null) {
        minify = false;
      }
      try {
        if (this.isJavascript()) {
          result = [this.compileLibs(), this.compileModules(), this.jsAfter].join("\n");
          if (minify) {
            result = uglify(result);
          }
          return result;
        } else {
          result = [];
          _ref = this.paths;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _path = _ref[_i];
            _path = require.resolve(path.resolve(_path));
            delete require.cache[_path];
            result.push(require(_path));
          }
          return result.join("\n");
        }
      } catch (ex) {
        console.trace(ex);
        command = process.argv[2];
        switch (command) {
          case "server":
            return "console.log(\"" + ex + "\");";
          case "watch":
            return "";
          case "build":
            return process.exit(1);
        }
      }
    };

    Package.prototype.isJavascript = function() {
      return this.contentType === "application/javascript";
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.build = function(minify) {
      var source;
      if (minify == null) {
        minify = false;
      }
      console.log("Building " + this.name + " to target: " + this.target);
      source = this.compile(minify);
      if (source) {
        return fs.writeFileSync(this.target, source);
      }
    };

    Package.prototype.watch = function() {
      var dir, lib, _i, _len, _ref, _results,
        _this = this;
      _ref = ((function() {
        var _j, _len, _ref, _results1;
        _ref = this.libs;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          lib = _ref[_j];
          _results1.push(path.dirname(lib));
        }
        return _results1;
      }).call(this)).concat(this.paths);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (!fs.existsSync(dir)) {
          continue;
        }
        _results.push(require('watch').watchTree(dir, {
          persistent: true,
          interval: 1000
        }, function(file, curr, prev) {
          if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
            return _this.build();
          }
        }));
      }
      return _results;
    };

    Package.prototype.middleware = function(req, res, next) {
      var str;
      str = this.compile();
      res.charset = 'utf-8';
      res.setHeader('Content-Type', this.contentType);
      res.setHeader('Content-Length', Buffer.byteLength(str));
      return res.end((req.method === 'HEAD' && null) || str);
    };

    return Package;

  })();

  module.exports = Package;

}).call(this);
