// Generated by CoffeeScript 1.6.2
(function() {
  var Application, CssPackage, Dependency, JsPackage, Package, Stitch, createApplication, fs, path, stitchFile, uglify, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  stitchFile = require('../assets/stitch');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  utils = require('./utils');

  Application = (function() {
    function Application(name, config) {
      var defaults, err, _ref;

      if (config == null) {
        config = {};
      }
      this.name = name;
      if (config.defaults) {
        try {
          defaults = require('../assets/defaults/' + config.defaults);
        } catch (_error) {
          err = _error;
          console.error("ERROR: Invalid 'defaults' value provided: " + config.defaults);
          process.exit(1);
        }
        utils.log(((_ref = global.ARGV) != null ? _ref.v : void 0) ? "Applying '" + config.defaults + "' defaults to configuration..." : void 0);
        config = utils.extend(defaults, config);
      }
      this.root = config.root || "";
      this.route = config.route || "/";
      this.packages = [];
      this["static"] = config["static"] || void 0;
      if (config.js) {
        this.js = new JsPackage(this, config.js);
        this.packages.push(this.js);
      }
      if (config.css) {
        this.css = new CssPackage(this, config.css);
        this.packages.push(this.css);
      }
      if (config.test) {
        this.test = new JsPackage(this, config.test);
        this.packages.push(this.test);
      }
    }

    Application.prototype.isMatchingRoute = function(route) {
      var pkg, _i, _len, _ref;

      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (route === pkg.url) {
          return pkg;
        }
      }
      return void 0;
    };

    Application.prototype.unlink = function() {
      var pkg, _i, _len, _ref, _results;

      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.unlink());
      }
      return _results;
    };

    Application.prototype.build = function(minify) {
      var pkg, _i, _len, _ref, _results;

      if (minify == null) {
        minify = false;
      }
      utils.log("Building application: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.build(minify));
      }
      return _results;
    };

    Application.prototype.watch = function() {
      var pkg, _i, _len, _ref, _results;

      utils.log("Watching application: '" + this.name + "'");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.watch());
      }
      return _results;
    };

    return Application;

  })();

  Package = (function() {
    function Package(parent, config) {
      var slash;

      if (config == null) {
        config = {};
      }
      this.parent = parent;
      this.paths = utils.toArray(config.paths || []);
      slash = utils.endsWith(parent.root, path.sep) ? "" : path.sep;
      if (this.parent.root.length > 0) {
        this.target = parent.root + slash + config.target;
      } else {
        this.target = config.target;
      }
      slash = utils.startsWith(parent.route, "/") ? "" : "/";
      if (config.route) {
        if (utils.startsWith(this.target, "/")) {
          this.route = config.route;
        } else {
          this.route = parent.route + slash + config.route;
        }
      } else {
        this.route = parent.route + slash + this.target;
      }
    }

    Package.prototype.handleCompileError = function(ex) {
      var _ref;

      if (ex.stack) {
        utils.log(ex.stack);
      } else {
        utils.error(ex.message);
      }
      if (ex.path) {
        console.error(ex.path);
      }
      if (ex.location) {
        console.error(ex.location);
      }
      switch ((_ref = global.ARGV) != null ? _ref.command : void 0) {
        case "server" || "watch":
          return "console.log(\"HEM compile ERROR: " + ex + "\");";
        default:
          return process.exit(1);
      }
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.build = function(minify) {
      var source;

      if (minify == null) {
        minify = false;
      }
      utils.log(" - Building target: <yellow>" + this.target + "</yellow>");
      source = this.compile(minify);
      if (source) {
        return fs.writeFileSync(this.target, source);
      }
    };

    Package.prototype.watch = function() {
      var dir, lib, _i, _len, _ref, _results,
        _this = this;

      _ref = ((function() {
        var _j, _len, _ref, _results1;

        _ref = this.libs;
        _results1 = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          lib = _ref[_j];
          _results1.push(path.dirname(lib));
        }
        return _results1;
      }).call(this)).concat(this.paths);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (!fs.existsSync(dir)) {
          continue;
        }
        _results.push(require('watch').watchTree(dir, {
          persistent: true,
          interval: 1000
        }, function(file, curr, prev) {
          if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
            return _this.build();
          }
        }));
      }
      return _results;
    };

    return Package;

  })();

  JsPackage = (function(_super) {
    __extends(JsPackage, _super);

    function JsPackage(parent, config) {
      if (config == null) {
        config = {};
      }
      config.target || (config.target = parent.name + ".js");
      JsPackage.__super__.constructor.call(this, parent, config);
      this.identifier = config.identifier || 'require';
      this.libs = utils.toArray(config.libs || []);
      this.modules = utils.toArray(config.modules || []);
      this.after = utils.toArray(config.after || []);
      this.testType = config.test || void 0;
    }

    JsPackage.prototype.compile = function(minify) {
      var ex, result;

      if (minify == null) {
        minify = false;
      }
      try {
        result = [this.compileLibs(), this.compileModules(), this.compileLibs(this.after)].join("\n");
        if (minify) {
          result = uglify(result);
        }
        return result;
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    JsPackage.prototype.compileModules = function() {
      var _modules, _stitch;

      this.depend || (this.depend = new Dependency(this.modules));
      _stitch = new Stitch(this.paths);
      _modules = this.depend.resolve().concat(_stitch.resolve());
      return stitchFile({
        identifier: this.identifier,
        modules: _modules
      });
    };

    JsPackage.prototype.compileLibs = function(files, parentDir) {
      var dir, file, results, slash, stats, _i, _len;

      if (files == null) {
        files = this.libs;
      }
      if (parentDir == null) {
        parentDir = "";
      }
      results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        slash = parentDir === "" ? "" : path.sep;
        file = parentDir + slash + file;
        if (fs.existsSync(file)) {
          stats = fs.lstatSync(file);
          if (stats.isDirectory()) {
            dir = fs.readdirSync(file);
            results.push(this.compileLibs(dir, file));
          } else if (stats.isFile()) {
            results.push(fs.readFileSync(file, 'utf8'));
          }
        }
      }
      return results.join("\n");
    };

    return JsPackage;

  })(Package);

  CssPackage = (function(_super) {
    __extends(CssPackage, _super);

    function CssPackage(parent, config) {
      if (config == null) {
        config = {};
      }
      config.target || (config.target = parent.name + ".css");
      CssPackage.__super__.constructor.call(this, parent, config);
    }

    CssPackage.prototype.compile = function(minify) {
      var ex, result, _i, _len, _path, _ref;

      if (minify == null) {
        minify = false;
      }
      try {
        result = [];
        _ref = this.paths;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _path = _ref[_i];
          _path = require.resolve(path.resolve(_path));
          delete require.cache[_path];
          result.push(require(_path));
        }
        return result.join("\n");
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    return CssPackage;

  })(Package);

  createApplication = function(name, config) {
    return new Application(name, config);
  };

  module.exports.createApplication = createApplication;

}).call(this);
