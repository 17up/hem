// Generated by CoffeeScript 1.6.2
(function() {
  var Hem, Package, argv, compilers, connect, fs, help, http, httpProxy, optimist, path, versions,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('fs');

  optimist = require('optimist');

  connect = require('connect');

  httpProxy = require('http-proxy');

  http = require('http');

  compilers = require('./compilers');

  versions = require('./versioning');

  Package = require('./package');

  argv = optimist.usage(['usage:\nhem COMMAND', '    server  :start a dynamic development server', '    build   :serialize application to disk', '    watch   :build & watch disk for changes', '    test    :build and run tests', '    clean   :clean compiled targets', '    version :version the application files'].join("\n")).alias('p', 'port').describe('p', ':hem server port').alias('d', 'debug').describe('d', ':all compilations use debug mode').alias('t', 'test').describe('t', ':run testacular while using watch').alias('s', 'slug').describe('s', ':run hem using a specified slug file').alias('b', 'browser').describe('b', ':run testacular using the supplied browser[s]').alias('n', 'noBuild').describe('n', ':turn off dynamic builds during server mode').describe('v', ':make hem more talkative(verbose)').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  compilers.DEBUG = !!argv.debug;

  compilers.VERBOSE = !!argv.v;

  help = function() {
    var _ref;

    console.log("HEM Version: " + ((_ref = require('../package.json')) != null ? _ref.version : void 0) + "\n");
    optimist.showHelp();
    return process.exit();
  };

  Hem = (function() {
    Hem.exec = function(command, options) {
      return (new this(options)).exec(command);
    };

    Hem.include = function(props) {
      var key, value, _results;

      _results = [];
      for (key in props) {
        value = props[key];
        _results.push(this.prototype[key] = value);
      }
      return _results;
    };

    Hem.prototype.compilers = compilers;

    Hem.prototype.slug = argv.slug || './slug.json';

    Hem.prototype.options = {
      server: {
        port: 9294,
        host: 'localhost'
      }
    };

    Hem.prototype.errorAndExit = function(error) {
      console.log("ERROR: " + error);
      return process.exit(1);
    };

    function Hem(options) {
      var config, key, name, value, _base, _base1, _base2, _ref;

      if (options == null) {
        options = {};
      }
      this.middleware = __bind(this.middleware, this);
      for (key in options) {
        value = options[key];
        this.options[key] = value;
      }
      if (fs.existsSync(this.slug)) {
        _ref = this.readSlug();
        for (key in _ref) {
          value = _ref[key];
          this.options[key] = value;
        }
      } else {
        this.errorAndExit("Unable to find " + this.slug + " file in current directory");
      }
      if (this.options.version) {
        (_base = this.options.version).type || (_base.type = "package");
        this.vertype = versions[this.options.version.type];
        if (!this.vertype) {
          this.errorAndExit("Incorrect type value for versioning (" + this.options.version.type + ")");
        }
      }
      if (argv.port) {
        this.options.server.port = argv.port;
      }
      (_base1 = this.options.server).host || (_base1.host = "");
      (_base2 = this.options).routes || (_base2.routes = []);
      this.packages = (function() {
        var _ref1, _results;

        _ref1 = this.options.packages;
        _results = [];
        for (name in _ref1) {
          config = _ref1[name];
          _results.push(this.createPackage(name, config));
        }
        return _results;
      }).call(this);
    }

    Hem.prototype.server = function() {
      var app, pkg, route, url, value, _i, _j, _len, _len1, _ref, _ref1;

      app = connect();
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (!(!argv.n)) {
          continue;
        }
        pkg.url || (pkg.url = this.determineUrlFromRoutes(pkg));
        if (!pkg.url) {
          this.errorAndExit("Unable to determine url mapping for package: " + pkg.name);
        }
        if (argv.v) {
          console.log("Map package '" + pkg.name + "' to " + pkg.url);
        }
      }
      app.use(this.middleware(argv.debug));
      _ref1 = this.options.routes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        route = _ref1[_j];
        url = Object.keys(route)[0];
        value = route[url];
        if (typeof value === 'string') {
          if (!fs.existsSync(value)) {
            this.errorAndExit("The folder " + value + " does not exist.");
          }
          if (argv.v) {
            console.log("Map directory '" + value + "' to " + url);
          }
          app.use(url, connect["static"](value));
        } else if (value.host) {
          if (argv.v) {
            console.log("Proxy '" + url + "' to " + value.host + ":" + value.port + value.hostPath);
          }
          app.use(url, this.createRoutingProxy(value));
          if (value.patchRedirect) {
            this.patchServerResponseForRedirects(this.options.server.port, value);
          }
        } else {
          this.errorAndExit("Invalid route configuration for " + url);
        }
      }
      return http.createServer(app).listen(this.options.server.port, this.options.server.host);
    };

    Hem.prototype.clean = function() {
      var cleanAll, pkg, targets, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      cleanAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || cleanAll) {
          _results.push(pkg.unlink());
        }
      }
      return _results;
    };

    Hem.prototype.build = function() {
      this.clean();
      return this.buildTargets(argv.targets);
    };

    Hem.prototype.version = function() {
      if (!this.vertype) {
        console.error("ERROR: Versioning not enabled in slug.json");
        return;
      }
      return this.vertype.updateFiles(this.options.version.files, this.packages);
    };

    Hem.prototype.watch = function() {
      var pkg, targets, watchAll, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      this.buildTargets(targets);
      if (argv.test) {
        this.startTestacular(targets, false);
      }
      watchAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || watchAll) {
          _results.push(pkg.watch());
        }
      }
      return _results;
    };

    Hem.prototype.test = function() {
      this.buildTargets(argv.targets);
      return this.startTestacular(argv.targets);
    };

    Hem.prototype.exec = function(command) {
      if (command == null) {
        command = argv.command;
      }
      if (!this[command]) {
        return help();
      }
      switch (command) {
        case 'build':
          console.log('Build application');
          break;
        case 'watch':
          console.log('Watching application');
          break;
        case 'test':
          console.log('Test application');
          break;
        case 'clean':
          console.log('Clean application');
          break;
        case 'server':
          console.log("Starting Server at " + this.options.server.host + ":" + this.options.server.port);
      }
      return this[command]();
    };

    Hem.prototype.readSlug = function(slug) {
      if (slug == null) {
        slug = this.slug;
      }
      if (!(slug && fs.existsSync(slug))) {
        return {};
      }
      return JSON.parse(fs.readFileSync(slug, 'utf-8'));
    };

    Hem.prototype.createPackage = function(name, config) {
      var pkg;

      return pkg = new Package(name, config, argv);
    };

    Hem.prototype.buildTargets = function(targets) {
      var buildAll, pkg, _i, _len, _ref, _ref1, _results;

      if (targets == null) {
        targets = [];
      }
      buildAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || buildAll) {
          _results.push(pkg.build(!argv.debug));
        }
      }
      return _results;
    };

    Hem.prototype.createRoutingProxy = function(options) {
      var proxy;

      if (options == null) {
        options = {};
      }
      proxy = new httpProxy.RoutingProxy();
      options.hostPath || (options.hostPath = "");
      options.port || (options.port = 80);
      return function(req, res, next) {
        req.url = "" + options.hostPath + req.url;
        return proxy.proxyRequest(req, res, options);
      };
    };

    Hem.prototype.patchServerResponseForRedirects = function(port, config) {
      var writeHead;

      writeHead = http.ServerResponse.prototype.writeHead;
      return http.ServerResponse.prototype.writeHead = function(status) {
        var headers, newLocation, oldLocation;

        if (status === 301 || status === 302) {
          headers = this._headers;
          oldLocation = new RegExp(":\/\/" + config.host + ":?[0-9]*");
          newLocation = "://localhost:" + port;
          headers.location = headers.location.replace(oldLocation, newLocation);
        }
        return writeHead.apply(this, arguments);
      };
    };

    Hem.prototype.startTestacular = function(targets, singleRun) {
      var testConfig;

      if (targets == null) {
        targets = [];
      }
      if (singleRun == null) {
        singleRun = true;
      }
      testConfig = fs.existsSync(argv.test) && fs.realpathSync(argv.test);
      testConfig || (testConfig = {
        configFile: require.resolve("../assets/testacular.conf.js"),
        singleRun: singleRun,
        basePath: process.cwd(),
        logLevel: 'error',
        browsers: argv.browser && argv.browser.split(/[ ,]+/) || ['PhantomJS'],
        files: this.createTestacularFileList()
      });
      return require('karma').server.start(testConfig);
    };

    Hem.prototype.createTestacularFileList = function() {
      var fileList, pkg, _i, _len, _ref;

      fileList = [require.resolve("../node_modules/karma/adapter/lib/jasmine.js"), require.resolve("../node_modules/karma/adapter/jasmine.js")];
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (pkg.isJavascript()) {
          fileList.push(pkg.target);
        }
      }
      return fileList;
    };

    Hem.prototype.middleware = function(debug) {
      var _this = this;

      return function(req, res, next) {
        var pkg, str, url, _i, _len, _ref, _ref1;

        url = ((_ref = require("url").parse(req.url)) != null ? _ref.pathname.toLowerCase() : void 0) || "";
        if (!url.match(/\.js|\.css/)) {
          next();
          return;
        }
        if (_this.vertype) {
          url = _this.vertype.trimVersion(url);
        }
        _ref1 = _this.packages;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          pkg = _ref1[_i];
          if (url === pkg.url) {
            str = pkg.compile(!debug);
            res.charset = 'utf-8';
            res.setHeader('Content-Type', pkg.contentType);
            res.setHeader('Content-Length', Buffer.byteLength(str));
            res.end((req.method === 'HEAD' && null) || str);
            return;
          }
        }
        return next();
      };
    };

    Hem.prototype.determineUrlFromRoutes = function(pkg) {
      var bestMatch, dir, route, url, _i, _len, _ref;

      bestMatch = {};
      _ref = this.options.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        url = Object.keys(route);
        dir = route[url];
        if (pkg.target.indexOf(dir) === 0 && (!bestMatch.url || bestMatch.dir.length < dir.length)) {
          bestMatch.url = url + pkg.target.slice(dir.length);
          bestMatch.dir = dir;
        }
      }
      return bestMatch.url.toLowerCase();
    };

    return Hem;

  })();

  module.exports = Hem;

}).call(this);
