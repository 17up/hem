// Generated by CoffeeScript 1.3.3
(function() {
  var Hem, Package, argv, compilers, connect, fs, help, http, httpProxy, optimist, path,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('fs');

  optimist = require('optimist');

  connect = require('connect');

  httpProxy = require('http-proxy');

  http = require('http');

  compilers = require('./compilers');

  Package = require('./package');

  argv = optimist.usage(['  usage: hem COMMAND', '    server  start a dynamic development server', '    build   serialize application to disk', '    watch   build & watch disk for changes', '    test    build and run tests', '    clean   clean compiled files'].join("\n")).alias('p', 'port').alias('d', 'debug').alias('t', 'test').alias('s', 'slug').alias('b', 'browser').argv;

  help = function() {
    optimist.showHelp();
    return process.exit();
  };

  Hem = (function() {

    Hem.exec = function(command, options) {
      return (new this(options)).exec(command);
    };

    Hem.include = function(props) {
      var key, value, _results;
      _results = [];
      for (key in props) {
        value = props[key];
        _results.push(this.prototype[key] = value);
      }
      return _results;
    };

    Hem.prototype.compilers = compilers;

    Hem.prototype.slug = argv.slug || './slug.json';

    Hem.prototype.options = {
      server: {
        port: argv.port || 9294,
        host: argv.host || 'localhost'
      }
    };

    function Hem(options) {
      var config, key, name, value, _ref;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        value = options[key];
        this.options[key] = value;
      }
      if (fs.existsSync(this.slug)) {
        _ref = this.readSlug();
        for (key in _ref) {
          value = _ref[key];
          this.options[key] = value;
        }
      } else {
        console.log("ERROR: Unable to find " + this.slug + " file in current directory");
        process.exit(1);
      }
      this.packages = (function() {
        var _ref1, _results;
        _ref1 = this.options.packages;
        _results = [];
        for (name in _ref1) {
          config = _ref1[name];
          _results.push(this.createPackage(name, config));
        }
        return _results;
      }).call(this);
    }

    Hem.prototype.server = function() {
      var app, pkg, route, url, value, _i, _j, _len, _len1, _ref, _ref1;
      app = connect();
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        pkg.url || (pkg.url = this.determinePackageUrl(pkg));
        if (!pkg.url) {
          console.log("ERROR: Unable to determine url mapping for package: " + pkg.name);
          process.exit(1);
        }
        console.log("Map package " + pkg.name + " to " + pkg.url);
        app.use(pkg.url, pkg.middleware);
      }
      _ref1 = this.options.routes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        route = _ref1[_j];
        url = Object.keys(route)[0];
        value = route[url];
        if (typeof value === 'string') {
          if (fs.existsSync(value)) {
            console.log("Map directory " + value + " to " + url);
            app.use(url, connect["static"](value));
          } else {
            console.log("ERROR: The folder " + value + " does not exist.");
            process.exit(1);
          }
        } else {
          console.log("Proxy requests from " + url + " to " + value.host);
          if (value.host) {
            app.use(url, this.createRoutingProxy(value));
          }
        }
      }
      return http.createServer(app).listen(this.options.server.port, this.options.server.host);
    };

    Hem.prototype.clean = function() {
      var cleanAll, pkg, targets, _i, _len, _ref, _ref1, _results;
      targets = argv._.slice(1);
      cleanAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || cleanAll) {
          _results.push(pkg.unlink());
        }
      }
      return _results;
    };

    Hem.prototype.build = function() {
      var targets;
      this.clean();
      targets = argv._.slice(1);
      return this.buildTargets(targets);
    };

    Hem.prototype.watch = function() {
      var pkg, targets, watchAll, _i, _len, _ref, _ref1, _results;
      targets = argv._.slice(1);
      this.buildTargets(targets);
      if (argv.test) {
        this.startTestacular(targets, false);
      }
      watchAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || watchAll) {
          _results.push(pkg.watch());
        }
      }
      return _results;
    };

    Hem.prototype.test = function() {
      var targets;
      targets = argv._.slice(1);
      this.buildTargets(targets);
      return this.startTestacular(targets);
    };

    Hem.prototype.exec = function(command) {
      if (command == null) {
        command = argv._[0];
      }
      if (!this[command]) {
        return help();
      }
      switch (command) {
        case 'build':
          console.log('Build application');
          break;
        case 'watch':
          console.log('Watching application');
          break;
        case 'test':
          console.log('Test application');
          break;
        case 'clean':
          console.log('Clean application');
      }
      return this[command]();
    };

    Hem.prototype.readSlug = function(slug) {
      if (slug == null) {
        slug = this.slug;
      }
      if (!(slug && fs.existsSync(slug))) {
        return {};
      }
      return JSON.parse(fs.readFileSync(slug, 'utf-8'));
    };

    Hem.prototype.createPackage = function(name, config) {
      var pkg;
      return pkg = new Package(name, config);
    };

    Hem.prototype.buildTargets = function(targets) {
      var buildAll, pkg, _i, _len, _ref, _ref1, _results;
      if (targets == null) {
        targets = [];
      }
      buildAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || buildAll) {
          _results.push(pkg.build(!argv.debug));
        }
      }
      return _results;
    };

    Hem.prototype.createRoutingProxy = function(options) {
      var proxy;
      if (options == null) {
        options = {};
      }
      proxy = new httpProxy.RoutingProxy();
      options.hostPath || (options.hostPath = "");
      return function(req, res, next) {
        req.url = "" + options.hostPath + req.url;
        return proxy.proxyRequest(req, res, options);
      };
    };

    Hem.prototype.startTestacular = function(targets, singleRun) {
      var testConfig;
      if (targets == null) {
        targets = [];
      }
      if (singleRun == null) {
        singleRun = true;
      }
      testConfig = fs.existsSync(argv.test) && fs.realpathSync(argv.test);
      testConfig || (testConfig = {
        configFile: require.resolve("../assets/testacular.conf.js"),
        singleRun: singleRun,
        basePath: process.cwd(),
        logLevel: 2,
        browsers: argv.browser && [argv.browser] || ['PhantomJS'],
        files: this.createTestacularFileList()
      });
      return require('testacular').server.start(testConfig);
    };

    Hem.prototype.createTestacularFileList = function() {
      var fileList, pkg, _i, _len, _ref;
      fileList = [require.resolve("../node_modules/testacular/adapter/lib/jasmine.js"), require.resolve("../node_modules/testacular/adapter/jasmine.js")];
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (pkg.isJavascript()) {
          fileList.push(pkg.target);
        }
      }
      return fileList;
    };

    Hem.prototype.determinePackageUrl = function(pkg) {
      var bestMatch, dir, route, url, _i, _len, _ref;
      bestMatch = {};
      _ref = this.options.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        url = Object.keys(route);
        dir = route[url];
        if (pkg.target.indexOf(dir) === 0 && (!bestMatch.url || bestMatch.dir.length < dir.length)) {
          bestMatch.url = url + pkg.target.slice(dir.length);
          bestMatch.dir = dir;
        }
      }
      return bestMatch.url;
    };

    return Hem;

  })();

  module.exports = Hem;

}).call(this);
