// Generated by CoffeeScript 1.6.2
(function() {
  var Hem, Package, argv, compilers, fs, help, optimist, path, server, testing, versions,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('fs');

  optimist = require('optimist');

  compilers = require('./compilers');

  server = require('./server');

  versions = require('./versioning');

  Package = require('./package');

  testing = require('./test');

  argv = optimist.usage(['usage:\nhem COMMAND', '    server  :start a dynamic development server', '    build   :serialize application to disk', '    watch   :build & watch disk for changes', '    test    :build and run tests', '    clean   :clean compiled targets', '    version :version the application files'].join("\n")).alias('p', 'port').describe('p', ':hem server port').alias('d', 'debug').describe('d', ':all compilations use debug mode').alias('t', 'test').describe('t', ':run testacular while using watch').alias('s', 'slug').describe('s', ':run hem using a specified slug file').alias('b', 'browser').describe('b', ':run testacular using the supplied browser[s]').alias('n', 'noBuild').describe('n', ':turn off dynamic builds during server mode').describe('v', ':make hem more talkative(verbose)').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  compilers.DEBUG = server.DEBUG = !!argv.debug;

  compilers.VERBOSE = server.VERBOSE = !!argv.v;

  help = function() {
    var _ref;

    console.log("HEM Version: " + ((_ref = require('../package.json')) != null ? _ref.version : void 0) + "\n");
    optimist.showHelp();
    return process.exit();
  };

  Hem = (function() {
    Hem.exec = function(command, options) {
      return (new this(options)).exec(command);
    };

    Hem.include = function(props) {
      var key, value, _results;

      _results = [];
      for (key in props) {
        value = props[key];
        _results.push(this.prototype[key] = value);
      }
      return _results;
    };

    Hem.middleware = function(slugFile) {
      var hem;

      hem = new Hem(slugFile);
      return server.middleware(hem.packages, hem.options.server);
    };

    Hem.prototype.compilers = compilers;

    Hem.prototype.options = {
      framework: "spine",
      server: {
        port: 9294,
        host: "localhost"
      }
    };

    Hem.prototype.errorAndExit = function(error) {
      console.log("ERROR: " + error);
      return process.exit(1);
    };

    function Hem(options) {
      var config, key, name, slug, slugDir, value, _base, _base1, _base2, _ref;

      if (options == null) {
        options = {};
      }
      if (options === "string") {
        slug = options;
      } else {
        slug = argv.slug || './slug.json';
        for (key in options) {
          value = options[key];
          this.options[key] = value;
        }
      }
      if (fs.existsSync(slug)) {
        _ref = this.readSlug(slug);
        for (key in _ref) {
          value = _ref[key];
          this.options[key] = value;
        }
        slugDir = path.dirname(path.resolve(process.cwd() + "/" + slug));
        process.chdir(slugDir);
      } else {
        this.errorAndExit("Unable to find " + slug + " file in current directory");
      }
      if (this.options.version) {
        (_base = this.options.version).type || (_base.type = "package");
        if (!(this.options.version.module = versions[this.options.version.type])) {
          this.errorAndExit("Incorrect type value for versioning (" + this.options.version.type + ")");
        }
      }
      if (argv.port) {
        this.options.server.port = argv.port;
      }
      (_base1 = this.options.server).host || (_base1.host = "");
      (_base2 = this.options.server).routes || (_base2.routes = []);
      this.packages = (function() {
        var _ref1, _results;

        _ref1 = this.options.packages;
        _results = [];
        for (name in _ref1) {
          config = _ref1[name];
          _results.push(Package.createPackage(name, config));
        }
        return _results;
      }).call(this);
    }

    Hem.prototype.server = function() {
      return server.start(this.packages, this.options.server);
    };

    Hem.prototype.clean = function() {
      var cleanAll, pkg, targets, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      cleanAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || cleanAll) {
          _results.push(pkg.unlink());
        }
      }
      return _results;
    };

    Hem.prototype.build = function() {
      this.clean();
      return this.buildTargets(argv.targets);
    };

    Hem.prototype.version = function() {
      var files, module, _ref, _ref1;

      module = (_ref = this.options.version) != null ? _ref.module : void 0;
      files = (_ref1 = this.options.version) != null ? _ref1.files : void 0;
      if (module && files) {
        return module.updateFiles(files, this.packages);
      } else {
        return console.error("ERROR: Versioning not enabled in slug.json");
      }
    };

    Hem.prototype.watch = function() {
      var pkg, targets, watchAll, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      this.buildPackages(targets);
      if (argv.test) {
        this.testTargets(targets, {
          singleRun: false
        });
      }
      watchAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || watchAll) {
          _results.push(pkg.watch());
        }
      }
      return _results;
    };

    Hem.prototype.test = function() {
      this.buildTargets(argv.targets);
      return this.testTargets(argv.targets);
    };

    Hem.prototype.exec = function(command) {
      if (command == null) {
        command = argv.command;
      }
      if (!this[command]) {
        return help();
      }
      switch (command) {
        case 'build':
          console.log('Build application');
          break;
        case 'watch':
          console.log('Watching application');
          break;
        case 'test':
          console.log('Test application');
          break;
        case 'clean':
          console.log('Clean application');
          break;
        case 'server':
          console.log("Starting Server at " + this.options.server.host + ":" + this.options.server.port);
      }
      return this[command]();
    };

    Hem.prototype.readSlug = function(slug) {
      if (!(slug && fs.existsSync(slug))) {
        return {};
      }
      return JSON.parse(fs.readFileSync(slug, 'utf-8'));
    };

    Hem.prototype.getTargetPackages = function(targets) {
      var pkg, targetAll, _i, _len, _ref, _ref1, _results;

      if (targets == null) {
        targets = [];
      }
      targetAll = targets.length === 0;
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if ((_ref1 = pkg.name, __indexOf.call(targets, _ref1) >= 0) || targetAll) {
          _results.push(pkg);
        }
      }
      return _results;
    };

    Hem.prototype.testTargets = function(targets, options) {
      var pkg, testPackages;

      if (targets == null) {
        targets = [];
      }
      if (options == null) {
        options = {};
      }
      testPackages = (function() {
        var _i, _len, _ref, _ref1, _results;

        _ref = this.getTargetPackages(targets);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pkg = _ref[_i];
          if ((_ref1 = pkg.target) != null ? _ref1.test(/\.js$/i) : void 0) {
            _results.push(pkg);
          }
        }
        return _results;
      }).call(this);
      return testing.run(testPackages, singlRun);
    };

    Hem.prototype.buildTargets = function(targets) {
      var pkg, _i, _len, _ref, _results;

      if (targets == null) {
        targets = [];
      }
      _ref = this.getTargetPackages(targets);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.build(!argv.debug));
      }
      return _results;
    };

    return Hem;

  })();

  module.exports = Hem;

}).call(this);
