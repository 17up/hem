// Generated by CoffeeScript 1.6.2
(function() {
  var Hem, application, argv, compilers, fs, help, optimist, path, server, testing, utils,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  optimist = require('optimist');

  utils = require('./utils');

  fs = require('fs');

  compilers = require('./compilers');

  server = require('./server');

  application = require('./package');

  testing = require('./test');

  argv = optimist.usage(['usage:\nhem COMMAND', '    server  :start a dynamic development server', '    build   :serialize application to disk', '    watch   :build & watch disk for changes', '    test    :build and run tests', '    clean   :clean compiled targets', '    version :version the application files'].join("\n")).alias('p', 'port').describe('p', ':hem server port').alias('d', 'debug').describe('d', ':all compilations use debug mode').alias('t', 'test').describe('t', ':run testacular while using watch').alias('s', 'slug').describe('s', ':run hem using a specified slug file').alias('b', 'browser').describe('b', ':run testacular using the supplied browser[s]').alias('n', 'noBuild').describe('n', ':turn off dynamic builds during server mode').describe('v', ':make hem more talkative(verbose)').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  utils.ARGV = argv;

  utils.DEBUG = argv.debug = !!argv.debug;

  utils.VERBOSE = argv.v = !!argv.v;

  utils.COMMAND = argv.command;

  help = function() {
    var _ref;

    utils.log("<b>HEM</b> Version: <green>" + ((_ref = require('../package.json')) != null ? _ref.version : void 0) + "</green>\n");
    optimist.showHelp();
    return process.exit();
  };

  Hem = (function() {
    Hem.exec = function(command, options) {
      return (new this(options)).exec(command);
    };

    Hem.include = function(props) {
      var key, value, _results;

      _results = [];
      for (key in props) {
        value = props[key];
        _results.push(this.prototype[key] = value);
      }
      return _results;
    };

    Hem.middleware = function(slugFile) {
      var hem;

      hem = new Hem(slugFile);
      return server.middleware(hem, hem.options.server);
    };

    Hem.prototype.compilers = compilers;

    Hem.prototype.homeDir = '';

    Hem.prototype.options = {
      server: {
        port: 9294,
        host: "localhost"
      }
    };

    Hem.prototype.apps = [];

    function Hem(options) {
      var config, key, name, slug, value, _base, _base1, _ref, _ref1;

      if (options == null) {
        options = {};
      }
      if (options === "string") {
        slug = options;
      } else {
        slug = argv.slug || './slug.json';
        for (key in options) {
          value = options[key];
          this.options[key] = value;
        }
      }
      if (fs.existsSync(slug)) {
        _ref = this.readSlug(slug);
        for (key in _ref) {
          value = _ref[key];
          this.options[key] = value;
        }
        this.homeDir = path.dirname(path.resolve(process.cwd() + "/" + slug));
        process.chdir(this.homeDir);
      } else {
        utils.errorAndExit("Unable to find " + slug + " file in current directory");
      }
      if (argv.port) {
        this.options.server.port = argv.port;
      }
      (_base = this.options.server).host || (_base.host = "");
      (_base1 = this.options.server).routes || (_base1.routes = []);
      _ref1 = this.options;
      for (name in _ref1) {
        config = _ref1[name];
        if (name === "server") {
          continue;
        }
        this.apps.push(application.createApplication(name, config));
      }
    }

    Hem.prototype.server = function() {
      utils.log("Starting Server at <blue>http://" + (this.options.server.host || "localhost") + ":" + this.options.server.port + "</blue>");
      return server.start(this, this.options.server);
    };

    Hem.prototype.clean = function() {
      var app, cleanAll, targets, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      cleanAll = targets.length === 0;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        if ((_ref1 = app.name, __indexOf.call(targets, _ref1) >= 0) || cleanAll) {
          _results.push(app.unlink());
        }
      }
      return _results;
    };

    Hem.prototype.build = function() {
      this.clean();
      return this.buildTargets(argv.targets);
    };

    Hem.prototype.version = function() {
      return this.versionTargets(argv.targets);
    };

    Hem.prototype.watch = function() {
      var app, targets, watchAll, _i, _len, _ref, _ref1, _results;

      targets = argv.targets;
      this.buildTargets(targets);
      if (argv.test) {
        this.testTargets(targets, {
          singleRun: false
        });
      }
      watchAll = targets.length === 0;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        if ((_ref1 = app.name, __indexOf.call(targets, _ref1) >= 0) || watchAll) {
          _results.push(app.watch());
        }
      }
      return _results;
    };

    Hem.prototype.test = function() {
      this.buildTargets(argv.targets);
      return this.testTargets(argv.targets);
    };

    Hem.prototype.exec = function(command) {
      if (command == null) {
        command = argv.command;
      }
      if (!this[command]) {
        return help();
      }
      switch (command) {
        case 'test':
          utils.log('Test application');
          break;
        case 'clean':
          utils.log('Clean application');
      }
      return this[command]();
    };

    Hem.prototype.readSlug = function(slug) {
      if (!(slug && fs.existsSync(slug))) {
        return {};
      }
      return JSON.parse(fs.readFileSync(slug, 'utf-8'));
    };

    Hem.prototype.getTargetApps = function(targets) {
      var app, targetAll, _i, _len, _ref, _ref1, _results;

      if (targets == null) {
        targets = [];
      }
      targetAll = targets.length === 0;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        if ((_ref1 = app.name, __indexOf.call(targets, _ref1) >= 0) || targetAll) {
          _results.push(app);
        }
      }
      return _results;
    };

    Hem.prototype.testTargets = function(targets, options) {
      var app, testApps;

      if (targets == null) {
        targets = [];
      }
      if (options == null) {
        options = {};
      }
      testApps = (function() {
        var _i, _len, _ref, _results;

        _ref = this.getTargetApps(targets);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          if (app.test) {
            _results.push(app);
          }
        }
        return _results;
      }).call(this);
      return testing.run(this, testApps, options);
    };

    Hem.prototype.buildTargets = function(targets) {
      var app, _i, _len, _ref, _results;

      if (targets == null) {
        targets = [];
      }
      _ref = this.getTargetApps(targets);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.build(true));
      }
      return _results;
    };

    Hem.prototype.versionTargets = function(targets) {
      var app, _i, _len, _ref, _results;

      if (targets == null) {
        targets = [];
      }
      _ref = this.getTargetApps(targets);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.version());
      }
      return _results;
    };

    return Hem;

  })();

  module.exports = Hem;

}).call(this);
