// Generated by CoffeeScript 1.6.2
(function() {
  var clean, extend, flatten, fs, path, sty, utils,
    __slice = [].slice;

  sty = require('sty');

  path = require('path');

  fs = require('fs');

  utils = {};

  utils.flatten = flatten = function(array, results) {
    var item, _i, _len;

    if (results == null) {
      results = [];
    }
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (Array.isArray(item)) {
        flatten(item, results);
      } else {
        results.push(item);
      }
    }
    return results;
  };

  utils.toArray = function(value) {
    if (value == null) {
      value = [];
    }
    if (Array.isArray(value)) {
      return value;
    } else {
      return [value];
    }
  };

  utils.startsWith = function(str, value) {
    return (str != null ? str.slice(0, value.length) : void 0) === value;
  };

  utils.endsWith = function(str, value) {
    return (str != null ? str.slice(-value.length) : void 0) === value;
  };

  utils.extend = extend = function(a, b) {
    var x;

    for (x in b) {
      if (typeof b[x] === 'object' && !Array.isArray(b[x])) {
        a[x] || (a[x] = {});
        extend(a[x], b[x]);
      } else {
        a[x] = b[x];
      }
    }
    return a;
  };

  utils.loadAsset = function(asset) {
    return require("../assets/" + asset);
  };

  utils.isDirectory = function(dir) {
    var e, stats;

    try {
      stats = fs.lstatSync(dir);
      return stats.isDirectory();
    } catch (_error) {
      e = _error;
      return false;
    }
  };

  clean = function(values, sep, trimStart) {
    var regexp, result, value, _i, _len;

    if (trimStart == null) {
      trimStart = false;
    }
    result = "";
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      if (value) {
        result = result + sep + value;
      }
    }
    regexp = new RegExp("" + sep + "+", "g");
    result = result.replace(regexp, sep);
    if (trimStart && utils.startsWith(result, sep)) {
      result = result.slice(sep.length);
    }
    if (utils.endsWith(result, sep)) {
      result = result.slice(0, -sep.length);
    }
    return result;
  };

  utils.cleanPath = function() {
    var paths;

    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return clean(paths, path.sep, true);
  };

  utils.cleanRoute = function() {
    var routes;

    routes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return clean(routes, "/");
  };

  utils.log = function(message) {
    return console.log(sty.parse(message));
  };

  utils.info = function(message) {
    if (this.VERBOSE) {
      return console.log(sty.parse(message));
    }
  };

  utils.error = function(message) {
    return console.log("" + (sty.red('ERROR:')) + " " + (sty.parse(message)));
  };

  utils.errorAndExit = function(error) {
    utils.error(error);
    return process.exit(1);
  };

  utils.parse = function(message) {
    return sty.parse(message);
  };

  module.exports = utils;

}).call(this);
