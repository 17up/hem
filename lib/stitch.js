// Generated by CoffeeScript 1.6.3
(function() {
  var Module, Stitch, compilers, flatten, fs, modulerize, npath;

  npath = require('path');

  fs = require('fs');

  compilers = require('./compilers');

  modulerize = require('./resolve').modulerize;

  flatten = require('./utils').flatten;

  Stitch = (function() {
    function Stitch(paths) {
      var path;
      this.paths = paths != null ? paths : [];
      this.paths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(npath.resolve(path));
        }
        return _results;
      }).call(this);
    }

    Stitch.prototype.resolve = function() {
      var path;
      return flatten((function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(this.walk(path));
        }
        return _results;
      }).call(this));
    };

    Stitch.prototype.walk = function(path, parent, result) {
      var child, module, stat, _i, _len, _ref;
      if (parent == null) {
        parent = path;
      }
      if (result == null) {
        result = [];
      }
      if (!fs.existsSync(path)) {
        return;
      }
      _ref = fs.readdirSync(path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child = npath.join(path, child);
        stat = fs.statSync(child);
        if (stat.isDirectory()) {
          this.walk(child, parent, result);
        } else {
          module = new Module(child, parent);
          if (module.valid()) {
            result.push(module);
          }
        }
      }
      return result;
    };

    Stitch.prototype.template = function(identifier, modules) {
      var module;
      return "(function(/*! Stitch !*/) {\n  if (!this." + identifier + ") {\n    var modules = {}, cache = {}, require = function(name, root) {\n      var path = expand(root, name), indexPath = expand(path, './index'), module, fn;\n      module   = cache[path] || cache[indexPath]\n      if (module) {\n        return module.exports;\n      } else if (fn = modules[path] || modules[path = indexPath]) {\n        module = {id: path, exports: {}};\n        try {\n          cache[path] = module;\n          fn(module.exports, function(name) {\n            return require(name, dirname(path));\n          }, module);\n          return module.exports;\n        } catch (err) {\n          delete cache[path];\n          throw err;\n        }\n      } else {\n        throw 'module ' + name + ' not found';\n      }\n    }, expand = function(root, name) {\n      var results = [], parts, part;\n      if (/^\.\.?(\\/|$)/.test(name)) {\n        parts = [root, name].join('/').split('/');\n      } else {\n        parts = name.split('/');\n      }\n      for (var i = 0, length = parts.length; i < length; i++) {\n        part = parts[i];\n        if (part == '..') {\n          results.pop();\n        } else if (part != '.' && part != '') {\n          results.push(part);\n        }\n      }\n      return results.join('/');\n    }, dirname = function(path) {\n      return path.split('/').slice(0, -1).join('/');\n    };\n    this." + identifier + " = function(name) {\n      return require(name, '');\n    }\n    this." + identifier + ".define = function(bundle) {\n      for (var key in bundle)\n        modules[key] = bundle[key];\n    };\n    this." + identifier + ".modules = modules;\n    this." + identifier + ".cache   = cache;\n  }\n  return this." + identifier + ".define;\n}).call(this)({\n  " + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          module = modules[_i];
          _results.push(JSON.stringify(module.id) + (": function(exports, require, module) {" + (module.compile()) + "}"));
        }
        return _results;
      })()).join(', ')) + "\n});";
    };

    return Stitch;

  })();

  Module = (function() {
    function Module(filename, parent) {
      this.filename = filename;
      this.parent = parent;
      this.ext = npath.extname(this.filename).slice(1);
      this.id = modulerize(this.filename.replace(npath.join(this.parent, npath.sep), ''));
    }

    Module.prototype.compile = function() {
      return compilers[this.ext](this.filename);
    };

    Module.prototype.valid = function() {
      return !!compilers[this.ext];
    };

    return Module;

  })();

  module.exports = Stitch;

}).call(this);
