// Generated by CoffeeScript 1.6.3
(function() {
  var compileCoffeescript, compilers, cs, eco, err, fs, jade, less, path, stylus, utils;

  fs = require('fs');

  path = require('path');

  utils = require('./utils');

  compilers = {};

  compilers.js = compilers.css = function(path) {
    return fs.readFileSync(path, 'utf8');
  };

  require.extensions['.css'] = function(module, filename) {
    var source;
    source = JSON.stringify(compilers.css(filename));
    return module._compile("module.exports = " + source, filename);
  };

  try {
    cs = require('coffee-script');
    compilers.coffee = function(path) {
      return compileCoffeescript(path);
    };
    compilers.litcoffee = function(path) {
      return compileCoffeescript(path, true);
    };
    compileCoffeescript = function(path, literate) {
      var err;
      if (literate == null) {
        literate = false;
      }
      try {
        return cs.compile(fs.readFileSync(path, 'utf8'), {
          filename: path,
          literate: literate
        });
      } catch (_error) {
        err = _error;
        err.message = "Coffeescript Error: " + err.message;
        err.path = "Coffeescript Path:  " + path;
        if (err.location) {
          err.path = err.path + ":" + (err.location.first_line + 1);
        }
        throw err;
      }
    };
  } catch (_error) {
    err = _error;
  }

  eco = require('eco');

  compilers.eco = function(path) {
    var content;
    content = eco.precompile(fs.readFileSync(path, 'utf8'));
    return "var content = " + content + ";\nmodule.exports = content;";
  };

  compilers.jeco = function(path) {
    var content;
    content = eco.precompile(fs.readFileSync(path, 'utf8'));
    return "module.exports = function(values, data){ \n  var $  = jQuery, result = $();\n  values = $.makeArray(values);\n  data = data || {};\n  for(var i=0; i < values.length; i++) {\n    var value = $.extend({}, values[i], data, {index: i});\n    var elem  = $((" + content + ")(value));\n    elem.data('item', value);\n    $.merge(result, elem);\n  }\n  return result;\n};";
  };

  require.extensions['.jeco'] = require.extensions['.eco'];

  compilers.html = function(path) {
    var content;
    content = fs.readFileSync(path, 'utf8');
    return "module.exports = " + (JSON.stringify(content)) + ";\n";
  };

  require.extensions['.html'] = function(module, filename) {
    return module._compile(compilers.html(filename), filename);
  };

  try {
    jade = require('jade');
    compilers.jade = function(path) {
      var content, ex, source, template;
      content = fs.readFileSync(path, 'utf8');
      try {
        template = jade.compile(content, {
          filename: path,
          client: true
        });
        source = template.toString();
        return "module.exports = " + source + ";";
      } catch (_error) {
        ex = _error;
        throw new Error("" + ex + " in " + path);
      }
    };
    require.extensions['.jade'] = function(module, filename) {
      return module._compile(compilers.jade(filename), filename);
    };
  } catch (_error) {
    err = _error;
  }

  try {
    stylus = require('stylus');
    compilers.styl = function(_path) {
      var content, result;
      content = fs.readFileSync(_path, 'utf8');
      result = '';
      stylus(content).include(path.dirname(_path)).render(function(err, css) {
        if (err) {
          throw err;
        }
        return result = css;
      });
      return result;
    };
    require.extensions['.styl'] = function(module, filename) {
      var source;
      source = JSON.stringify(compilers.styl(filename));
      return module._compile("module.exports = " + source, filename);
    };
  } catch (_error) {
    err = _error;
  }

  try {
    less = require('less');
    compilers.less = function(_path) {
      var content, result;
      content = fs.readFileSync(_path, 'utf8');
      result = '';
      less.render(content, function(err, css) {
        if (err) {
          throw err;
        }
        return result = css;
      });
      return result;
    };
    require.extensions['.less'] = function(module, filename) {
      var source;
      source = JSON.stringify(compilers.less(filename));
      return module._compile("module.exports = " + source, filename);
    };
  } catch (_error) {
    err = _error;
  }

  compilers.env = function(path) {
    var content, envhash, key, packjson;
    content = fs.readFileSync(path, 'utf8');
    envhash = JSON.parse(content);
    packjson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    for (key in envhash) {
      if (process.env[key]) {
        envhash[key] = process.env[key];
        utils.info("- Set env <yellow>" + key + "</yellow> to <red>" + envhash[key] + "</red>");
      }
      if (packjson[key]) {
        envhash[key] = packjson[key];
        utils.info("  - Set env <yellow>" + key + "</yellow> to <red>" + envhash[key] + "</red>");
      }
    }
    return "module.exports = " + JSON.stringify(envhash);
  };

  module.exports = compilers;

}).call(this);
